package ${package}.${moduleName}.service.impl;


import cn.gov.customs.h2018.ctims.annotation.DataChangeAudit;
import ${package}.${moduleName}.mapper.${className}Mapper;
import ${package}.${moduleName}.model.${className};
import ${package}.${moduleName}.param.${className}Param;
import ${package}.${moduleName}.service.${className}Service;
import ${package}.${moduleName}.vo.${className}Model;
import cn.gov.customs.h2018.ctims.utils.BeanUtil;
import cn.gov.customs.h2018.ctims.utils.Utils;
import cn.gov.customs.h2018.framework.core.exception.common.BusinessException;
import cn.gov.customs.h2018.framework.core.exception.constant.ArgumentErrors;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;


/**
 * ${comments}服务实现层
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service("${classname}Service")
public class ${className}Impl extends ServiceImpl<${className}Mapper, ${className}> implements ${className}Service {


    @Autowired
    private ${className}Mapper mapper;


    /**
     * 新增
     */
    @Override
    @DataChangeAudit
    public ${className}Model insert(${className}Model vo) {
        ${className} po = new ${className}();
        BeanUtil.copyPropertiesExact(po, vo);
        mapper.insert(po);
        return this.parseVo(po);
    }


    /**
     * 删除
     */
    @Override
    @DataChangeAudit
    public int deleteById(String ${pk.attrname}) {
        if (Utils.isEmpty(${pk.attrname})) {
            throw new BusinessException("${pk.attrname} 不能为空", ArgumentErrors.NOT_NULL_EMPTY.getErrorInfo().getCode(), null, null, null);
        } else {
            return mapper.deleteById(${pk.attrname});
        }
    }


    /**
     * 修改
     */
    @Override
    @DataChangeAudit
    public ${className}Model updateById(${className}Model vo) {
        if (Utils.isEmpty(vo.get${pk.attrName}())) {
            throw new BusinessException("${pk.attrname} 不能为空", ArgumentErrors.NOT_NULL_EMPTY.getErrorInfo().getCode(), null, null, null);
        } else {
            mapper.updateById(vo);
            ${className}Model po = selectById(vo.get${pk.attrName}());
            BeanUtil.copyPropertiesExactIfExists(po, vo);
            return this.parseVo(po);
        }
    }


    /**
     * 查询
     * tips；单条
     */
    @Override
    public ${className}Model selectById(String ${pk.attrname}) {
        if (Utils.isEmpty(${pk.attrname})) {
            throw new BusinessException("${pk.attrname} 不能为空", ArgumentErrors.NOT_NULL_EMPTY.getErrorInfo().getCode(), null, null, null);
        } else {
            ${className} po = mapper.selectById(${pk.attrname});
            return this.parseVo(po);
        }
    }


    /**
     * 查询
     * tips；列表
     */
    @Override
    public Page<${className}Model> selectPage(${className}Param param) {
        Page<${className}Model> page = new Page<>(param.getCurrent(), param.getSize());
        List<${className}> list = mapper.selectPage(page, param);
        page.setRecords(this.parseVos(list));
        return page;
    }


    /**
     * 解析
     * tips；列表
     */
    private List<${className}Model> parseVos(List<${className}> pos) {
        List<${className}Model> vos = new ArrayList<>();
        for (${className} po : pos) {
            vos.add(this.parseVo(po));
        }
        return vos;
    }


    /**
     * 解析
     * tips；单条
     */
    private ${className}Model parseVo(${className} po) {
        ${className}Model vo = new ${className}Model();
        Utils.copyPropertiesExact(vo, po);
        return vo;
    }



}

